#!/bin/bash
#shellcheck disable=SC2154,SC2086

if [[ ${enable_log} == "true" ]]; then
  exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
  set -x
fi

DATETIME_START=$(date -u '+%Y_%m_%d_T%H:%M:%SZ')
echo "Script running at $DATETIME"

HOME_DIR="/home/ec2-user"

TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 3600")
PARTITION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/services/partition)
REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/region)
INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
HOSTNAME=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/hostname)
LOCAL_IPV4=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4)

PROXY_URL=${proxy_url}
if [[ -n "$PROXY_URL" ]]; then
  # https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-proxy.html
  export HTTPS_PROXY="$PROXY_URL" # enables calls to service APIs & IMDS

  MAC=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/mac/)
  VPC_CIDR=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" "http://169.254.169.254/latest/meta-data/network/interfaces/macs/$MAC/vpc-ipv4-cidr-blocks" | xargs | tr ' ' ',')

  NO_PROXY_LIST=$VPC_CIDR,localhost,127.0.0.1,169.254.169.254,.internal,${no_proxy_extra}
  NO_PROXY_LIST=$(sed "s/,$//" <<< "$NO_PROXY_LIST")

  # Set proxy for future processes
  cloud-init-per instance env_proxy_config cat <<EOF >> /etc/environment
http_proxy="$PROXY_URL"
https_proxy="$PROXY_URL"
no_proxy="$NO_PROXY_LIST"
HTTP_PROXY="$PROXY_URL"
HTTPS_PROXY="$PROXY_URL"
NO_PROXY="$NO_PROXY_LIST"
AWS_DEFAULT_REGION="$REGION"
EOF

  # https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-proxy-with-ssm-agent.html#ssm-agent-proxy-systemd
  mkdir /etc/systemd/system/amazon-ssm-agent.service.d
  cat <<EOF >> /etc/systemd/system/amazon-ssm-agent.service.d/override.conf
[Service]
EnvironmentFile=/etc/environment
EOF

fi

# update; https://aws.amazon.com/premiumsupport/knowledge-center/ec2-troubleshoot-yum-errors-al1-al2/
yum update -y

yum install -y amazon-efs-utils jq
AWS_CA_BUNDLE="/etc/pki/tls/certs/ca-bundle.crt"

  # Set path
  cat << EOF > /etc/profile.d/set-path.sh
export PATH=$PATH:/usr/local/bin
EOF

  # Set environment variables
  cat << EOF > /etc/profile.d/set-env.sh
export AWS_CA_BUNDLE="$AWS_CA_BUNDLE"
export AWS_DEFAULT_REGION="$REGION"
EOF

# Enable and restart in case agent isn't running
systemctl enable amazon-ssm-agent
systemctl start amazon-ssm-agent

# Create and mount EFS directories
success=false
attempt_num=1
max_attempts=24
sleep=5
mkdir -p "${ec2_mount_dir}"
while [[ $success = false ]] && [[ $attempt_num -le $max_attempts ]]; do
  mount -t efs -o tls "${efs_file_system_id}":"${efs_mount_point}" "${ec2_mount_dir}"
  if [[ $? -eq 0 ]]; then
    success=true
    echo "File system ${efs_file_system_id} has been successfully mounted"
  else
    echo "Attempt $attempt_num to mount file system ${efs_file_system_id} failed. Trying again..."
    attempt_num=$(( attempt_num + 1 ))
  fi
done
if [[ $success = false ]]; then
  echo "Mounting the file system ${efs_file_system_id} failed after $attempt_num-- attempts"
fi

# https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html#mount-fs-auto-mount-onreboot
echo "${efs_file_system_id}":"${efs_mount_point}" "${ec2_mount_dir}" efs _netdev,noresvport,tls 0 0 >> /etc/fstab

EFS_BASE_DIR=$(echo "${ec2_mount_dir}" | cut -d '/' -f 1,2) # for example, if ec2_mount_dir = /mnt/efs, EFS_BASE_DIR = /mnt

chown -R ec2-user:ec2-user "$EFS_BASE_DIR"

#### Samba
# Modify /etc/krb5.conf
sed -i '/^\[libdefaults\]/a\default_realm = ${samba_config.realm}' /etc/krb5.conf
sed -i '/^\[libdefaults\]/a\dns_lookup_kdc = true' /etc/krb5.conf

# Add instance to /etc/hosts
HOST=$(echo "$HOSTNAME" | cut -d '.' -f 1)
echo "$LOCAL_IPV4 $HOSTNAME $HOST" >> /etc/hosts

# Install packages
yum -y install authconfig samba samba-client samba-winbind samba-winbind-clients

# Map the domain Admin to the local root user (you add username map in the smb.conf)
mkdir -p /usr/local/samba/etc/
echo "!root = ${samba_config.workgroup}\Admin" >> /usr/local/samba/etc/user.map

# Add Samba configuration
  cat << EOF > /etc/samba/smb.conf
[global]
security = ADS
workgroup = ${samba_config.workgroup}
realm = ${samba_config.realm}

log file = /var/log/samba/%m.log
log level = 1

server role = member server

idmap config * : backend = tdb
idmap config * : range = 3000-7999
idmap config CORP:backend = ad
idmap config CORP:schema_mode = rfc2307
idmap config CORP:range = 10000-999999
idmap config CORP:unix_primary_group = yes
idmap config CORP:unix_nss_info = no


vfs objects = acl_xattr
map acl inherit = yes
store dos attributes = yes

template homedir = ${ec2_mount_dir}/users/%U
template shell = /bin/bash

username map = /usr/local/samba/etc/user.map
min domain uid = 0

[users]
path = /mnt/efs/users/
read only = no
force create mode = 0600
force directory mode = 0700

[${samba_config.efs_share_name}]
path = ${ec2_mount_dir}/${samba_config.efs_share_name}
valid users = root
read only = no
browseable = yes
writable = yes
EOF

# Reload Samba
smbcontrol all reload-config

# Join the domain
ADMIN_PASSWORD=$(aws ssm get-parameter --region "$REGION" --name "${samba_config.ad_secret_parameter_path}/admin" --with-decryption | jq -r '.Parameter.Value')
(echo $ADMIN_PASSWORD) | net ads join -U ${samba_config.workgroup}\\admin

# Configure NSS in /etc/nsswitch.conf
sed -i 's/^passwd: *sss files/& winbind/' /etc/nsswitch.conf
sed -i 's/^group: *sss files/& winbind/' /etc/nsswitch.conf

# Start the services
service smb start
service winbind start

# Create directories for the users
USERS_DIR=${ec2_mount_dir}/users
mkdir $USERS_DIR
chgrp -R ${samba_config.workgroup}\\${samba_config.group} $USERS_DIR
chmod 2750 $USERS_DIR

%{for user in samba_config.users ~}
mkdir $USERS_DIR/${user}
chown ${samba_config.workgroup}\\${user} $USERS_DIR/${user}
chmod 700 $USERS_DIR/${user}
%{endfor ~}

DATETIME_END=$(date -u '+%Y_%m_%d_T%H:%M:%SZ')
echo "User data complete at $DATETIME_END"
